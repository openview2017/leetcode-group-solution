class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
     if (root == null) {
         return null;
     }
        
     if (root.val > key) {
         root.left = deleteNode(root.left, key);
     } else if (root.val < key) {
         root.right = deleteNode(root.right, key);
     } else {
         if (root.left == null) {
             return root.right;
         }
         if (root.right == null) {
             return root.left;
         }
         TreeNode min = helper(root.right);
         root.right = deleteNode(root.right, min.val);
         min.left = root.left;
         min.right = root.right;
         root = min;     
     }
      return root;    
    }
    
    private TreeNode helper(TreeNode root) {// BST right subtree smallest node
        while (root.left != null) {
            root = root.left;
        }
        TreeNode min = root;
        return min;
    }
}
// TC: O(height) SC: O(height)